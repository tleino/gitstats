#!/bin/sh

#
# Configuration
#
GIT_URL=https://github.com/tleino

function sh_files {
	for a in $(find $1 -type f -not -path \*/.git\*) ; do
		if head -1 $a | grep '#!/bin/sh' >/dev/null ; then
			echo $a
		fi
	done
}

function lpc_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*majik?/lib\*[.][ch]
}

function java_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*[.]java
}

function js_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*[.]js
}

function html_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*[.]html
}

function roff_files {
	find $1 \
		-not -path \*/.git\* \
		-not -path \*majik3/lib\* \
		-path \*[.][123456789]
}

function awk_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*[.]awk
}

function m4_files {
	for a in $(find $1 \
	    -type f \
	    -not -path \*/.git\* \
	    -path \*.m4 \
	    -or -path \*.in \
	    -or -path \*.ac) ; do
		if file $a | grep 'M4 macro language' >/dev/null ; then
			echo $a
		fi
	done
}

function c_files {
	find $1 \
		-path \*[.][ch] \
		-not -path \*/.git\* \
		-not -path \*majik?/lib\*
}

function cpp_files {
	find $1 \
		-not -path \*/.git\* \
		-path \*[.]cpp \
		-or -path \*[.]hpp \
		-or -path \*[.]cc \
		-or -path \*[.]cxx
	for a in $(find $1 -type f \
	    -not -path \*/.git\* \
	    -path \*[.]h \
	    -not -path \*majik?/lib\*) ; do
		if head -1 $a | grep class >/dev/null ; then
			echo $a
		fi
	done
}

#
# top_lines:
#   $1: Root directory
#   $2: Filelist function e.g. cpp_files
#
function top_lines {
	TOP_NUM=0
	TOP=""
	for a in $(find $1 -type d -maxdepth 1 -mindepth 1) ; do
		FILELIST=$($2 $a)
		if [ "$FILELIST" != "" ] ; then
			NUM=$(cat $FILELIST | wc -l)
			if [ $NUM -gt $TOP_NUM ] ; then
				TOP=$a
				TOP_NUM=$NUM
			fi
		fi
	done
	echo $(basename $TOP)
}

#
# loc:
#   $1: Root directory
#   $2: Filelist function e.g. cpp_files
#
function loc {
	cat $($2 $1) | wc -l
}

print_lang_stats() {
	echo "C          <b>$C_LOC </b>lines (top: <a href=\"${GIT_URL}/${C_TOP}\">$C_TOP</a>)"
	echo "C++        <b>$CPP_LOC </b>lines (top: <a href=\"${GIT_URL}/${CPP_TOP}\">$CPP_TOP</a>)"
	echo "LPC        <b>$LPC_LOC </b>lines (top: <a href=\"${GIT_URL}/${LPC_TOP}\">$LPC_TOP</a>)"
	echo "Javascript <b>$JS_LOC </b>lines (top: <a href=\"${GIT_URL}/${JS_TOP}\">$JS_TOP</a>)"
	echo "Java       <b>$JAVA_LOC </b>lines (top: <a href=\"${GIT_URL}/${JAVA_TOP}\">$JAVA_TOP</a>)"
	echo "Shell      <b>$SHELL_LOC </b>lines (top: <a href=\"${GIT_URL}/${SHELL_TOP}\">$SHELL_TOP</a>)"
	echo "Roff       <b>$ROFF_LOC </b>lines (top: <a href=\"${GIT_URL}/${ROFF_TOP}\">$ROFF_TOP</a>)"
	echo "HTML       <b>$HTML_LOC </b>lines (top: <a href=\"${GIT_URL}/${HTML_TOP}\">$HTML_TOP</a>)"
	echo "AWK        <b>$AWK_LOC </b>lines (top: <a href=\"${GIT_URL}/${AWK_TOP}\">$AWK_TOP</a>)"
	echo "M4         <b>$M4_LOC </b>lines (top: <a href=\"${GIT_URL}/${M4_TOP}\">$M4_TOP</a>)"
}

which git >/dev/null || exit 1

GITDIR=/git
PUBLISHED=/git/published
CLONEDIR=/tmp/allgit

if [ ! -x $CLONEDIR ] ; then
	mkdir $CLONEDIR
fi
TOTAL_COMMITS=0
TOTAL_MY_COMMITS=0
for a in $(cat $PUBLISHED) ; do
	(cd $CLONEDIR && git clone file://${GITDIR}/$a)
	COMMITS=$(cd $CLONEDIR/$a && git log --pretty=oneline|wc -l)
	TOTAL_COMMITS=$(expr $COMMITS + $TOTAL_COMMITS)
	MY_COMMITS=$(cd $CLONEDIR/$a && git log --pretty=email \
		| egrep "^From: " \
		| egrep "namhas|tleino" \
		| wc -l)
	TOTAL_MY_COMMITS=$(expr $MY_COMMITS + $TOTAL_MY_COMMITS)
done
CONTRIB_COMMITS=$(expr $TOTAL_COMMITS - $TOTAL_MY_COMMITS)

SHELL_LOC=$(loc $CLONEDIR sh_files)
SHELL_TOP=$(top_lines $CLONEDIR sh_files)

CPP_LOC=$(loc $CLONEDIR cpp_files)
CPP_TOP=$(top_lines $CLONEDIR cpp_files)

M4_LOC=$(loc $CLONEDIR m4_files)
M4_TOP=$(top_lines $CLONEDIR m4_files)

C_LOC=$(loc $CLONEDIR c_files)
C_TOP=$(top_lines $CLONEDIR c_files)

LPC_LOC=$(loc $CLONEDIR lpc_files)
LPC_TOP=$(top_lines $CLONEDIR lpc_files)

JAVA_LOC=$(loc $CLONEDIR java_files)
JAVA_TOP=$(top_lines $CLONEDIR java_files)

JS_LOC=$(loc $CLONEDIR js_files)
JS_TOP=$(top_lines $CLONEDIR js_files)

HTML_LOC=$(loc $CLONEDIR html_files)
HTML_TOP=$(top_lines $CLONEDIR html_files)

ROFF_LOC=$(loc $CLONEDIR roff_files)
ROFF_TOP=$(top_lines $CLONEDIR roff_files)

AWK_LOC=$(loc $CLONEDIR awk_files)
AWK_TOP=$(top_lines $CLONEDIR awk_files)

TOTAL_LOC=$(expr $C_LOC + $LPC_LOC + $JAVA_LOC + \
	$CPP_LOC + $SHELL_LOC + $AWK_LOC + $M4_LOC + $HTML_LOC + $ROFF_LOC + \
	$JS_LOC)

echo "<p>"
echo "Projects published: <b>$(ls -1 $CLONEDIR | wc -l)</b><br>"
echo "Published lines of code: <b>$TOTAL_LOC</b><br>"
echo "Total commits: <b>$TOTAL_COMMITS</b><br>"
echo "Commits from contributors: <b>$CONTRIB_COMMITS</b><br>"
echo "Last updated: <b>$(date +'%B %d, %Y')</b><br>"
echo "<pre>"
print_lang_stats | sort -nr -k 3
echo "</pre>"
echo "</p>"
echo "<p>"
PAGES=$(expr $TOTAL_LOC / 60)
echo "This is about <b>${PAGES}</b> A4-sized pages if printed out."
echo "</p>"
